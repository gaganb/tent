minispade.register('template/button', "(function() {Ember.TEMPLATES['button']=Ember.Handlebars.compile(\"<div {{bindAttr class=\\\"view.classes\\\" disabled=\\\"view.isDisabled\\\"}} {{action triggerAction target=\\\"view\\\"}}>\\n  {{view.label}}\\n  {{#if view.hasOptions}}\\n  \\t <span class=\\\"caret\\\"></span>\\n  {{/if}}\\n</div>\\n{{#if view.hasOptions}}\\n\\t{{collection contentBinding=\\\"view._options\\\" tagName=\\\"ul\\\" classNames=\\\"dropdown-menu\\\" itemViewClass=\\\"Tent.ButtonOptions\\\"}}\\n{{/if}}\");\n})();\n//@ sourceURL=template/button");minispade.register('template/checkbox', "(function() {Ember.TEMPLATES['checkbox']=Ember.Handlebars.compile(\"<div class=\\\"controls\\\">\\n    {{view.label}}\\n    {{view Ember.Checkbox  checkedBinding=\\\"view.checked\\\" disabledBinding = \\\"view.disabled\\\" valueBinding= \\\"view.value\\\"}}\\n</div> \");\n})();\n//@ sourceURL=template/checkbox");minispade.register('template/checkbox_group', "(function() {Ember.TEMPLATES['checkbox_group']=Ember.Handlebars.compile(\"<label class=\\\"control-label\\\">{{view.label}}</label>\\n\\n<div class=\\\"controls\\\">\\n  {{#each check in view._list}}\\n    {{view Ember.Checkbox  checkedBinding=\\\"view.list.selected\\\" disabledBinding = \\\"view.disabled\\\" }} {{check}}\\n  {{/each}}\\n</div>\\n\\n\");\n})();\n//@ sourceURL=template/checkbox_group");minispade.register('template/modal_pane', "(function() {Ember.TEMPLATES['modal_pane']=Ember.Handlebars.compile(\"<div class=\\\"modal-header\\\">\\n  <a href=\\\"#\\\" class=\\\"close\\\" click=\\\"close\\\">x</a>\\n  {{view Tent.ModalHeader}}\\n</div>\\n<div class=\\\"modal-body\\\">\\n  {{view Tent.ModalBody}}\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  {{#if view.secondary}}<a href=\\\"#\\\" class=\\\"btn btn-secondary\\\" click=\\\"secondary\\\">{{view.secondary}}</a>{{/if}}\\n  {{#if view.primary}}<a href=\\\"#\\\" class=\\\"btn btn-primary\\\" click=\\\"primary\\\">{{view.primary}}</a>{{/if}}\\n</div>\");\n})();\n//@ sourceURL=template/modal_pane");minispade.register('template/select', "(function() {Ember.TEMPLATES['select']=Ember.Handlebars.compile(\"<label class=\\\"control-label\\\">{{view.label}}</label>\\n\\n<div class=\\\"controls\\\">\\n  {{view Ember.Select \\n         contentBinding=\\\"view._list\\\" \\n         classBinding=\\\"view.inputSizeClass\\\" \\n         optionLabelPathBinding=\\\"view.optionLabelPath\\\" \\n         optionValuePathBinding =\\\"view.optionValuePath\\\" \\n         selectionBinding=\\\"view.list.selected\\\"\\n         multipleBinding=\\\"view.multiple\\\"\\n         promptBinding = \\\"view._prompt\\\" \\n         valueBinding = \\\"view.value\\\"}}  \\n</div>\");\n})();\n//@ sourceURL=template/select");minispade.register('template/table', "(function() {Ember.TEMPLATES['table']=Ember.Handlebars.compile(\"<thead>\\n\\t{{#if view.isEditable}} <th></th> {{/if}}\\n\\t{{collection contentBinding=\\\"view.visibleHeaders\\\" itemViewClass=\\\"Tent.TableHeader\\\"}}\\n</thead>\\n{{#if view.isEditable}}\\n  {{collection contentBinding=\\\"view.list\\\" tagName=\\\"tbody\\\" itemViewClass=\\\"Tent.TableRow\\\"}}\\n{{else}}\\n  {{collection contentBinding=\\\"view.defaultSelection\\\" tagName=\\\"tbody\\\" itemViewClass=\\\"Tent.TableRow\\\"}}\\n{{/if}}\\n\");\n})();\n//@ sourceURL=template/table");minispade.register('template/table_row', "(function() {Ember.TEMPLATES['table_row']=Ember.Handlebars.compile(\"{{#if view.parentTable.isEditable}}\\n\\t{{debugger}}\\n  {{#if view.parentTable.multiselection}}\\n    <td class=\\\"tent-width-small\\\">\\n      {{view Ember.Checkbox nameBinding=\\\"view.parentTable.elementId\\\" valueBinding=\\\"{{view.elementId}}\\\"}}\\n    </td>\\n  {{else}}\\n    <td class=\\\"tent-width-small\\\">\\n\\t  <input type='radio' {{bindAttr name=\\\"view.parentTable.elementId\\\" value=\\\"{{view.elementId}}\\\"}}>\\n    </td>\\n  {{/if}}\\n{{/if}}\\n{{collection contentBinding=\\\"view.parentTable.visibleColumns\\\" itemViewClass=\\\"Tent.TableCell\\\"}}\\n\\n\");\n})();\n//@ sourceURL=template/table_row");minispade.register('template/text_field', "(function() {Ember.TEMPLATES['text_field']=Ember.Handlebars.compile(\"<label class=\\\"control-label\\\">{{view.label}}</label>\\n<div class=\\\"controls\\\">\\n  <div class=\\\"input-prepend\\\">\\n    {{#if view.hasPrefix}}  \\n      <span class=\\\"add-on\\\">{{view.prefix}}</span>\\n    {{/if}}     \\n    {{#if view.isEditable}}\\n      {{view Ember.TextField classBinding=\\\"view.inputSizeClass\\\" valueBinding=\\\"view.value\\\"}}\\n    {{else}}\\n      <span {{bindAttr class=\\\"view.unEditableClass view.inputSizeClass\\\"}}>{{view.value}}</span>\\n    {{/if}}\\n  </div>\\n  {{#if view.hasErrors}}\\n    <span class=\\\"help-inline\\\">{{view.validationErrors}}</span>\\n  {{/if}}  \\n</div>\\n\");\n})();\n//@ sourceURL=template/text_field");minispade.register('tent', "(function() {(function() {\n\n  if (this.Tent == null) {\n    this.Tent = {};\n  }\nminispade.require('util');\nminispade.require('view');\n\n}).call(this);\n\n})();\n//@ sourceURL=tent");minispade.register('util/computed', "(function() {(function() {\n\n  if (Tent.computed == null) {\n    Tent.computed = {};\n  }\n\n  Tent.computed.boolCoerceGently = function(dependentKey) {\n    return Ember.computed(dependentKey, (function(key) {\n      var value;\n      value = this.get(dependentKey);\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n      if (typeof value === 'string') {\n        return value.toBoolean();\n      }\n      if (typeof value === 'number') {\n        return value !== 0;\n      }\n    }));\n  };\n\n  Tent.computed.translate = function(dependentKey) {\n    return Ember.computed(dependentKey, (function(key) {\n      var value;\n      value = this.get(dependentKey) || '';\n      return Tent.translate(value);\n    }));\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=util/computed");minispade.register('util', "(function() {(function() {\nminispade.require('util/resize_support');\nminispade.require('util/string');\nminispade.require('util/computed');\nminispade.require('util/translation_support');\nminispade.require('util/messages');\nminispade.require('util/selectable_array_proxy');\nminispade.require('util/selection_support');\n\n}).call(this);\n\n})();\n//@ sourceURL=util");minispade.register('util/messages', "(function() {(function() {\n\n  if (Tent.messages == null) {\n    Tent.messages = {};\n  }\n\n  Tent.messages.MANDATORY_ERROR = 'Mandatory field';\n\n  Tent.messages.NUMERIC_ERROR = \"Numeric field\";\n\n  Tent.messages.EMAIL_FORMAT_ERROR = \"Email format error\";\n\n}).call(this);\n\n})();\n//@ sourceURL=util/messages");minispade.register('util/resize_support', "(function() {(function() {\n\n  Tent.ResizeSupport = Ember.Mixin.create({\n    resize: function() {\n      return this.get('childViews').forEach(function(child) {\n        return child.resize();\n      });\n    }\n  });\n\n  Ember.$(document).ready(function() {\n    Ember.View.reopen(Tent.ResizeSupport);\n    return window.onresize = function() {\n      var rootView, view;\n      for (view in Em.View.views) {\n        if (!Ember.View.views[view].get('parentView')) {\n          break;\n        }\n      }\n      rootView = Ember.View.views[view];\n      if (rootView && typeof rootView.resize === 'function') {\n        return rootView.resize();\n      }\n    };\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=util/resize_support");minispade.register('util/selectable_array_proxy', "(function() {(function() {\n\n  Tent.SelectableArrayProxy = Ember.ArrayProxy.extend({\n    init: function() {\n      this._super();\n      this.set('_selectedElementsArray', []);\n      this.set('_selectedIndexArray', []);\n      this.set('_selectedElement', null);\n      this.set('_selectedIndex', -1);\n      return this.set('_selection', null);\n    },\n    selected: (function(key, value) {\n      if (value !== undefined) {\n        if (this.get('isMultipleSelectionAllowed')) {\n          this.set('_selection', this._multiSelection(value).slice());\n        } else {\n          this.set('_selection', new Array(this._singleSelection(value)).slice());\n        }\n      }\n      return this.get('_selection');\n    }).property().volatile(),\n    _singleSelection: (function(value) {\n      if (value !== undefined) {\n        if (value !== null) {\n          if (value !== this.get('_selectedElement')) {\n            if (this.indexOf(value >= 0)) {\n              this.set('_selectedElement', value);\n              this.set('_selectedIndex', this.indexOf(value));\n            }\n          } else {\n            this.set('_selectedElement', null);\n            this.set('_selectedIndex', -1);\n          }\n        } else {\n          this.set('_selectedElement', null);\n          this.set('_selectedIndex', -1);\n        }\n      }\n      return this.get('_selectedElement');\n    }),\n    _multiSelection: function(value) {\n      var selectedElements, selectedIndices;\n      if (value !== undefined) {\n        if (value !== null) {\n          selectedElements = this.get('_selectedElementsArray');\n          selectedIndices = this.get('_selectedIndexArray');\n          if (selectedElements.contains(value)) {\n            selectedElements.removeObject(value);\n            selectedIndices.splice(selectedIndices.indexOf(this.indexOf(value)), 1);\n          } else {\n            selectedElements.addObject(value);\n            selectedIndices.push(this.indexOf(value));\n          }\n        } else {\n          this.set('_selectedElementsArray', []);\n          this.set('_selectedIndexArray', []);\n        }\n      }\n      return this.get('_selectedElementsArray');\n    },\n    contentDidChange: (function() {\n      var content, currentElement, currentElementsArray, currentIndex, currentIndexArray, element, newIndex, newIndexArray, _i, _j, _len, _len1, _results;\n      content = this.get('content');\n      if (this.get('isMultipleSelectionAllowed')) {\n        currentIndexArray = this.get('_selectedIndexArray');\n        currentElementsArray = this.get('_selectedElementsArray');\n        newIndexArray = [];\n        if (currentElementsArray.length !== 0) {\n          for (_i = 0, _len = currentElementsArray.length; _i < _len; _i++) {\n            element = currentElementsArray[_i];\n            if (content.contains(element)) {\n              newIndexArray.push(content.indexOf(element));\n            }\n          }\n          if (currentIndexArray.toString() !== newIndexArray.toString()) {\n            this.set('_selectedElementsArray', []);\n            this.set('_selectedIndexArray', []);\n            if (newIndexArray.length !== 0) {\n              _results = [];\n              for (_j = 0, _len1 = newIndexArray.length; _j < _len1; _j++) {\n                element = newIndexArray[_j];\n                _results.push(this.set('selected', content.objectAt(element)));\n              }\n              return _results;\n            } else {\n              return this.set('selected', null);\n            }\n          }\n        }\n      } else {\n        currentIndex = this.get('_selectedIndex');\n        currentElement = this.get('_selectedElement');\n        if (currentElement !== null) {\n          if (content.contains(currentElement)) {\n            newIndex = this.indexOf(currentElement);\n            if (newIndex !== currentIndex) {\n              return this.set('_selectedIndex', content.indexOf(currentElement));\n            }\n          } else {\n            return this.set('selected', null);\n          }\n        }\n      }\n    }).observes('content.@each')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=util/selectable_array_proxy");minispade.register('util/selection_support', "(function() {(function() {\n\n  Tent.SelectionSupport = Ember.ArrayProxy.extend({\n    init: function() {\n      this._super();\n      this.set('_selectedElementsArray', []);\n      this.set('_selectedIndexArray', []);\n      this.set('_selectedElement', null);\n      this.set('_selectedIndex', -1);\n      return this.set('_selection', null);\n    },\n    selected: (function(key, value) {\n      if (value !== undefined) {\n        if (this.get('isMultipleSelectionAllowed')) {\n          this.set('_selection', this._multiSelection(value).slice());\n        } else {\n          this.set('_selection', this._singleSelection(value));\n        }\n      }\n      return this.get('_selection');\n    }).property().volatile(),\n    _singleSelection: (function(value) {\n      if (value !== undefined) {\n        if (value !== null) {\n          if (value !== this.get('_selectedElement')) {\n            if (this.indexOf(value >= 0)) {\n              this.set('_selectedElement', value);\n              this.set('_selectedIndex', this.indexOf(value));\n            }\n          } else {\n            this.set('_selectedElement', null);\n            this.set('_selectedIndex', -1);\n          }\n        } else {\n          this.set('_selectedElement', null);\n          this.set('_selectedIndex', -1);\n        }\n      }\n      return this.get('_selectedElement');\n    }),\n    _multiSelection: function(value) {\n      var selectedElements, selectedIndices;\n      if (value !== undefined) {\n        if (value !== null) {\n          selectedElements = this.get('_selectedElementsArray');\n          selectedIndices = this.get('_selectedIndexArray');\n          if (selectedElements.contains(value)) {\n            selectedElements.removeObject(value);\n            selectedIndices.splice(selectedIndices.indexOf(this.indexOf(value)), 1);\n          } else {\n            selectedElements.addObject(value);\n            selectedIndices.push(this.indexOf(value));\n          }\n        } else {\n          this.set('_selectedElementsArray', []);\n          this.set('_selectedIndexArray', []);\n        }\n      }\n      return this.get('_selectedElementsArray');\n    },\n    contentDidChange: (function() {\n      var content, currentElement, currentElementsArray, currentIndex, currentIndexArray, element, newIndex, newIndexArray, _i, _j, _len, _len1, _results;\n      content = this.get('content');\n      if (this.get('isMultipleSelectionAllowed')) {\n        currentIndexArray = this.get('_selectedIndexArray');\n        currentElementsArray = this.get('_selectedElementsArray');\n        newIndexArray = [];\n        if (currentElementsArray.length !== 0) {\n          for (_i = 0, _len = currentElementsArray.length; _i < _len; _i++) {\n            element = currentElementsArray[_i];\n            if (content.contains(element)) {\n              newIndexArray.push(content.indexOf(element));\n            }\n          }\n          if (currentIndexArray.toString() !== newIndexArray.toString()) {\n            this.set('_selectedElementsArray', []);\n            this.set('_selectedIndexArray', []);\n            if (newIndexArray.length !== 0) {\n              _results = [];\n              for (_j = 0, _len1 = newIndexArray.length; _j < _len1; _j++) {\n                element = newIndexArray[_j];\n                _results.push(this.set('selected', content.objectAt(element)));\n              }\n              return _results;\n            } else {\n              return this.set('selected', null);\n            }\n          }\n        }\n      } else {\n        currentIndex = this.get('_selectedIndex');\n        currentElement = this.get('_selectedElement');\n        if (currentElement !== null) {\n          if (content.contains(currentElement)) {\n            newIndex = this.indexOf(currentElement);\n            if (newIndex !== currentIndex) {\n              return this.set('_selectedIndex', content.indexOf(currentElement));\n            }\n          } else {\n            return this.set('selected', null);\n          }\n        }\n      }\n    }).observes('content.@each')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=util/selection_support");minispade.register('util/string', "(function() {(function() {\n\n  Tent.DEFAULT_STRING_TRUNCATION_LENGTH = 30;\n\n  Ember.mixin(String.prototype, {\n    truncate: function(maxLength) {\n      var length;\n      length = Ember.none(maxLength) ? Tent.DEFAULT_STRING_TRUNCATION_LENGTH : maxLength;\n      if (this.length <= length) {\n        return this.toString();\n      } else {\n        return this.substr(0, length) + '...';\n      }\n    },\n    camelToWords: function() {\n      var spaced;\n      spaced = this.replace(/([A-Z])/g, \" $1\");\n      return spaced[0].toUpperCase() + spaced.substring(1);\n    },\n    isBlank: function() {\n      return this.trim().length === 0;\n    },\n    toBoolean: function() {\n      return this.toLowerCase() === 'true';\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=util/string");minispade.register('util/translation_support', "(function() {(function() {\n\n  Tent.translate = function(code) {\n    return \"t_\" + code;\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=util/translation_support");minispade.register('view/alert_message', "(function() {(function() {\n\n  Tent.AlertMessage = Ember.View.extend({\n    tagName: 'div',\n    classNames: ['alert'],\n    template: Ember.Handlebars.compile('<a href=\"#\" class=\"close\" close=\"close\">x</a>{{view.text}}'),\n    init: function() {\n      var classNames, type;\n      this._super();\n      type = this.get('type');\n      classNames = this.get('classNames');\n      if (type) {\n        return classNames.push('alert-' + type);\n      }\n    },\n    click: function(event) {\n      var target, targetClose;\n      target = event.target;\n      targetClose = target.getAttribute('close');\n      if (targetClose === 'close') {\n        this.destroy();\n        return false;\n      }\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/alert_message");minispade.register('view/amount_field', "(function() {(function() {\nminispade.require('view/field_support');\nminispade.require('template/text_field');\n\n  Tent.AmountField = Tent.NumericTextField.extend({\n    hasPrefix: true,\n    prefix: (function() {\n      return this.get('currency');\n    }).property('currency'),\n    inputSizeClass: (function() {\n      return Tent.AmountField.SIZE_CLASSES[this.estimateSpan() - 1];\n    }).property()\n  });\n\n  Tent.AmountField.SIZE_CLASSES = ['input-mini', 'input-mini', 'input-mini', 'input-small', 'input-medium', 'input-large', 'input-xlarge', 'input-xlarge', 'input-xlarge', 'input-xxlarge', 'input-xxlarge', 'input-xxlarge'];\n\n}).call(this);\n\n})();\n//@ sourceURL=view/amount_field");minispade.register('view/button', "(function() {(function() {\nminispade.require('template/button');\n\n  Tent.Button = Ember.View.extend(Ember.TargetActionSupport, {\n    templateName: 'button',\n    label: 'Button',\n    type: null,\n    isDisabled: false,\n    action: null,\n    classNameBindings: ['tent-button', 'hasOptions:tent-button-group button-group'],\n    optionLabelPath: 'label',\n    optionTargetPath: 'target',\n    optionActionPath: 'action',\n    init: function() {\n      this._super();\n      return this.set('_options', Ember.ArrayProxy.create({\n        content: this.get('optionList')\n      }) || []);\n    },\n    targetObject: (function() {\n      var target, value;\n      target = this.get('target');\n      if (Ember.typeOf(target) === \"string\") {\n        value = Em.get(target);\n        if (value === undefined) {\n          value = Em.get(window, target);\n        }\n        target = value;\n      }\n      return target || this.get('content') || this.get('context');\n    }).property('target', 'content', 'context'),\n    triggerAction: function() {\n      if (!this.isDisabled) {\n        if (!this.get('hasOptions')) {\n          return this._super();\n        } else {\n          return this.$().toggleClass('open');\n        }\n      }\n    },\n    classes: (function() {\n      var classes, type;\n      classes = ((type = this.get(\"type\")) !== null && this.BUTTON_CLASSES.indexOf(type.toLowerCase()) !== -1 ? \"btn btn-\" + type.toLowerCase() : \"btn\");\n      if (this.get(\"hasOptions\")) {\n        classes = classes.concat(\" dropdown-toggle\");\n      }\n      if (this.get(\"isDisabled\")) {\n        classes = classes.concat(\" disabled\");\n      }\n      return classes;\n    }).property('type', 'hasOptions'),\n    hasOptions: (function() {\n      var options;\n      options = this.get(\"optionList\");\n      return options !== undefined && options.get('length') !== 0;\n    }).property('_options'),\n    BUTTON_CLASSES: ['primary', 'info', 'success', 'warning', 'danger', 'inverse'],\n    optionList: (function() {\n      var content, options;\n      options = (options = this.get('options'));\n      if (options === undefined && (content = this.get('content')) !== undefined) {\n        options = content.get('options');\n      }\n      return options;\n    }).property('options', 'content').volatile()\n  });\n\n  Tent.ButtonOptions = Ember.View.extend(Ember.TargetActionSupport, {\n    template: Ember.Handlebars.compile('<a href=\"#\">{{view.label}}</a>'),\n    optionLabelBinding: 'parentView.parentView.optionLabelPath',\n    optionTargetBinding: 'parentView.parentView.optionTargetPath',\n    optionActionBinding: 'parentView.parentView.optionActionPath',\n    click: function() {\n      var button;\n      button = this.get('parentView.parentView');\n      button.$().toggleClass('open');\n      return this.triggerAction();\n    },\n    label: (function() {\n      var content;\n      content = this.get('content');\n      return content.get(this.get('optionLabel')) || content.get(this.get('optionAction')).camelToWords();\n    }).property('content'),\n    target: (function() {\n      var content;\n      content = this.get('content');\n      return content.get(this.get('optionTarget')) || this.get(\"parentView.parentView.content\") || this.get(\"parentView.parentView.context\");\n    }).property('content'),\n    action: (function() {\n      var content;\n      content = this.get('content');\n      return content.get(this.get('optionAction'));\n    }).property('content')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/button");minispade.register('view/checkbox', "(function() {(function() {\nminispade.require('view/field_support');\nminispade.require('template/checkbox');\n\n  Tent.Checkbox = Ember.View.extend(Tent.FieldSupport, {\n    templateName: 'checkbox',\n    classNames: ['tent-checkbox', 'control-group']\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/checkbox");minispade.register('view/checkbox_group', "(function() {(function() {\nminispade.require('template/checkbox_group');\n\n  Tent.CheckboxGroup = Ember.View.extend({\n    templateName: 'checkbox_group',\n    classNames: ['tent-checkbox-group', 'control-group'],\n    init: function() {\n      this._super();\n      return this.set('_list', Tent.SelectableArrayProxy.create({\n        content: this.get('list')\n      }) || []);\n    },\n    checkedDidChange: (function() {\n      console.log(this.get('list.selected'));\n      return this.set('selection', this.get('list.selected'));\n    }).observes('list.selected')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/checkbox_group");minispade.register('view/email_field', "(function() {(function() {\nminispade.require('view/field_support');\nminispade.require('template/text_field');\n\n  Tent.EmailTextField = Tent.TextField.extend(Tent.FieldSupport, {\n    validate: function() {\n      var isValid, isValidEmail, pattern, value;\n      isValid = this._super();\n      value = this.get('value');\n      pattern = /^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\\-+)|([A-Za-z0-9]+\\.+)|([A-Za-z0-9]+\\++))*[A-Za-z0-9]+@((\\w+\\-+)|(\\w+\\.))*\\w{1,63}\\.[a-zA-Z]{2,6}$/i;\n      isValidEmail = isValid && pattern.test(value);\n      if (!isValidEmail) {\n        this.addValidationError(Tent.messages.EMAIL_FORMAT_ERROR);\n      }\n      return isValidEmail;\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/email_field");minispade.register('view/field_support', "(function() {(function() {\nminispade.require('util/translation_support');\nminispade.require('view/visibility_support');\nminispade.require('view/validation_support');\nminispade.require('view/mandatory_support');\nminispade.require('view/span_support');\n\n  Tent.FieldSupport = Ember.Mixin.create(Tent.SpanSupport, Tent.TranslationSupport, Tent.ValidationSupport, Tent.VisibilitySupport, Tent.MandatorySupport, {\n    fieldClass: 'field',\n    mixinClasses: 'control-group',\n    classNameBindings: ['mixinClasses', 'isMandatoryAsBoolean:mandatory', 'isHidden:hidden', 'isViewOnly:view-only', 'hasErrors:error'],\n    isEditable: true,\n    isEditableAsBoolean: Tent.computed.boolCoerceGently('isEditable'),\n    isViewOnly: Ember.computed.not('isEditableAsBoolean'),\n    hasPrefix: false,\n    inputSizeClass: (function() {\n      return Tent.FieldSupport.SIZE_CLASSES[this.estimateSpan() - 1];\n    }).property(),\n    widthExpectation: (function() {\n      var fieldSize, formStyle;\n      formStyle = this.get('form.formStyle');\n      fieldSize = Tent.FieldSupport.SIZE_MAP[this.get('inputSizeClass')];\n      if (formStyle === 'horizontal') {\n        return fieldSize + 150;\n      } else {\n        return Math.max(fieldSize, 150);\n      }\n    }).property('form'),\n    form: (function() {\n      return Ember.View.views[this.$().closest('form').attr('id')];\n    }).property(),\n    resize: function() {\n      this._super();\n      return this.estimateFormStyle();\n    },\n    didInsertElement: function() {\n      this._super();\n      return this.estimateFormStyle();\n    },\n    estimateFormStyle: function() {\n      var form;\n      if ((form = this.get('form'))) {\n        return form.set('formStyle', this.get('widthExpectation') > form.$().width() ? 'vertical' : 'horizontal');\n      }\n    },\n    unEditableClass: (function() {\n      if (!this.get('isEditable')) {\n        return 'uneditable-input';\n      }\n    }).property('isEditable')\n  });\n\n  Tent.FieldSupport.SIZE_CLASSES = ['input-mini', 'input-small', 'input-mini', 'input-medium', 'input-large', 'input-xlarge', 'input-xlarge', 'input-xlarge', 'input-xxlarge', 'input-xxlarge', 'input-xxlarge', 'input-xxlarge'];\n\n  Tent.FieldSupport.SIZE_MAP = {\n    'input-mini': 60,\n    'input-small': 90,\n    'input-medium': 150,\n    'input-large': 210,\n    'input-xlarge': 270,\n    'input-xxlarge': 530\n  };\n\n}).call(this);\n\n})();\n//@ sourceURL=view/field_support");minispade.register('view', "(function() {(function() {\nminispade.require('view/span_support');\nminispade.require('view/field_support');\nminispade.require('view/text_field');\nminispade.require('view/tag');\nminispade.require('view/numeric_text_field');\nminispade.require('view/amount_field');\nminispade.require('view/table');\nminispade.require('view/panel');\nminispade.require('view/checkbox');\nminispade.require('view/select');\nminispade.require('view/checkbox_group');\nminispade.require('view/email_field');\nminispade.require('view/alert_message');\nminispade.require('view/modal_pane');\nminispade.require('view/progress_bar');\nminispade.require('view/button');\n\n}).call(this);\n\n})();\n//@ sourceURL=view");minispade.register('view/mandatory_support', "(function() {(function() {\nminispade.require('util/computed');\n\n  Tent.MandatorySupport = Ember.Mixin.create({\n    isMandatory: false,\n    isMandatoryAsBoolean: Tent.computed.boolCoerceGently('isMandatory'),\n    validate: function() {\n      var isValid, value;\n      this._super();\n      value = this.get('value');\n      isValid = (value != null) && value !== '';\n      if (!isValid) {\n        this.addValidationError(Tent.messages.MANDATORY_ERROR);\n      }\n      return isValid;\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/mandatory_support");minispade.register('view/modal_pane', "(function() {(function() {\n  var jQuery, modalPaneBackdrop;\nminispade.require('template/modal_pane');\n\n  jQuery = window.jQuery;\n\n  modalPaneBackdrop = '<div class=\"modal-backdrop\"></div>';\n\n  Tent.ModalPane = Ember.View.extend({\n    templateName: 'modal_pane',\n    classNames: ['modal'],\n    header: null,\n    text: null,\n    primary: null,\n    secondary: null,\n    showBackdrop: true,\n    click: function(event) {\n      var target, targetClick;\n      target = event.target;\n      targetClick = target.getAttribute('click');\n      if (targetClick === 'close' || 'primary' || 'secondary') {\n        this.destroy();\n        return false;\n      }\n    },\n    didInsertElement: function() {\n      if (this.showBackdrop) {\n        return this._appendBackdrop();\n      }\n    },\n    willDestroyElement: function() {\n      return this._backdrop.remove();\n    },\n    _appendBackdrop: function() {\n      return this._backdrop = jQuery(modalPaneBackdrop).appendTo(this.$().parent());\n    }\n  });\n\n  Tent.ModalHeader = Ember.View.extend({\n    tagName: 'h3',\n    defaultTemplate: Ember.Handlebars.compile('{{view.parentView.header}}')\n  });\n\n  Tent.ModalBody = Ember.View.extend({\n    tagName: 'p',\n    defaultTemplate: Ember.Handlebars.compile('{{view.parentView.text}}')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/modal_pane");minispade.register('view/numeric_text_field', "(function() {(function() {\nminispade.require('view/field_support');\nminispade.require('template/text_field');\n\n  Tent.NumericTextField = Tent.TextField.extend(Tent.FieldSupport, {\n    validate: function() {\n      var isValid, isValidNumber, value;\n      isValid = this._super();\n      value = this.get('value');\n      isValidNumber = isValid && (value !== '') && !(isNaN(value) || isNaN(parseFloat(value)));\n      if (!isValidNumber) {\n        this.addValidationError(Tent.messages.NUMERIC_ERROR);\n      }\n      return isValidNumber;\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/numeric_text_field");minispade.register('view/panel', "(function() {(function() {\nminispade.require('view/span_support');\n\n  Tent.Panel = Ember.View.extend(Tent.SpanSupport, {\n    layout: Ember.Handlebars.compile('{{#if view.name}}<h3>{{view.name}}</h3>{{/if}}{{yield}}'),\n    classNameBindings: ['spanClass']\n  });\n\n  Tent.Form = Tent.Panel.extend({\n    tagName: 'form',\n    staticClasses: 'well',\n    classNameBindings: ['spanClass', 'staticClasses', 'formClass'],\n    formStyle: 'horizontal',\n    formClass: (function() {\n      return 'form-' + this.get('formStyle');\n    }).property('formStyle')\n  });\n\n  Tent.Fieldset = Tent.Panel.extend({\n    layout: Ember.Handlebars.compile('{{#if view.name}}<legend>{{view.name}}</legend>{{/if}}{{yield}}'),\n    tagName: 'fieldset'\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/panel");minispade.register('view/progress_bar', "(function() {(function() {\n\n  Tent.ProgressBar = Ember.View.extend({\n    classNames: ['tent-progress-bar', 'progress'],\n    classNameBindings: ['isStriped:progress-striped', 'isAnimated:active'],\n    template: Ember.Handlebars.compile('<div class=\"bar\" {{bindAttr style=\"view.style\"}}></div>'),\n    isAnimated: false,\n    isStriped: false,\n    progress: 0,\n    style: Ember.computed(function() {\n      return \"width:\" + this.get('progress') + \"%;\";\n    }).property('progress')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/progress_bar");minispade.register('view/select', "(function() {(function() {\nminispade.require('template/select');\n\n  Tent.Select = Ember.View.extend(Tent.FieldSupport, {\n    templateName: 'select',\n    classNames: ['tent-select', 'control-group'],\n    init: function() {\n      this._super();\n      return this.set('_list', Tent.SelectableArrayProxy.create({\n        content: this.get('list')\n      }) || []);\n    },\n    selectionDidChange: (function() {\n      return this.set('selection', this.get('list.selected'));\n    }).observes('list.selected'),\n    _prompt: (function() {\n      var prompt;\n      if (!this.get('multiple')) {\n        if (prompt = this.get('prompt')) {\n          return prompt;\n        } else {\n          return \"Please Select...\";\n        }\n      }\n    }).property('prompt')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/select");minispade.register('view/span_support', "(function() {(function() {\n\n  Tent.SpanSupport = Ember.Mixin.create({\n    estimateSpan: function() {\n      var currentView, span;\n      currentView = this;\n      while (currentView) {\n        span = Number(currentView.get('span'));\n        if (!((span === 0) || isNaN(span))) {\n          return span;\n        }\n        currentView = currentView.get('parentView');\n      }\n      return 12;\n    },\n    spanClass: (function() {\n      if (this.get('span')) {\n        return 'span' + this.get('span');\n      }\n    }).property('span')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/span_support");minispade.register('view/table', "(function() {(function() {\nminispade.require('template/table');\nminispade.require('template/table_row');\n\n  Tent.Table = Ember.View.extend({\n    classNames: ['table', 'table-bordered', 'table-condensed'],\n    tagName: 'table',\n    templateName: 'table',\n    _columnHeaders: (function() {\n      return this.get('headers').split(',');\n    }).property('headers'),\n    visibleHeaders: (function() {\n      return this.get('_columnHeaders');\n    }).property('_columnHeaders'),\n    _columns: (function() {\n      return this.get('columns').split(',');\n    }).property('columns'),\n    visibleColumns: (function() {\n      return this.get('_columns');\n    }).property('_columns'),\n    init: function() {\n      var element, _i, _len, _ref, _results;\n      this._super();\n      if (this.get('multiselection') === void 0) {\n        this.set('multiselection', false);\n      }\n      if (this.get('isEditable') === void 0) {\n        this.set('isEditable', true);\n      }\n      this.set('_list', Tent.SelectableArrayProxy.create({\n        content: this.get('list')\n      }));\n      this.get('_list').set('isMultipleSelectionAllowed', this.get('multiselection'));\n      if (this.get('defaultSelection')) {\n        _ref = this.get('defaultSelection');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          element = _ref[_i];\n          _results.push(this.select(element));\n        }\n        return _results;\n      }\n    },\n    isRowSelected: function(row) {\n      var selElements;\n      if ((selElements = this.get('_list').get('selected')) !== null) {\n        return selElements.contains(row.get('content'));\n      } else {\n        return false;\n      }\n    },\n    select: function(selection) {\n      return this.get('_list').set('selected', selection);\n    },\n    selectionDidChange: (function() {\n      return this.set('selection', this.get('_list').get('selected'));\n    }).observes('_list.selected')\n  });\n\n  Tent.TableRow = Ember.View.extend({\n    tagName: 'tr',\n    templateName: 'table_row',\n    classNameBindings: ['isSelected:tent-selected'],\n    parentTableBinding: 'parentView.parentView',\n    didInsertElement: function() {\n      if (this.get('parentTable').get('isEditable')) {\n        return this.checkSelection();\n      }\n    },\n    isSelected: (function() {\n      return this.get('parentTable').isRowSelected(this);\n    }).property('parentTable.selection'),\n    checkSelection: (function() {\n      if (this.get('isSelected')) {\n        return this.$('input').prop('checked', true);\n      } else {\n        return this.$('input').prop('checked', false);\n      }\n    }).observes('isSelected'),\n    mouseUp: function(event) {\n      if (this.get('parentTable').get('isEditable')) {\n        this.get('parentTable').select(this.get('content'));\n      }\n      return this.$(\"input\").click(function(event) {\n        if ($(this).prop('checked')) {\n          $(this).prop('checked', false);\n        }\n        if (event.target === this) {\n          return false;\n        }\n      });\n    }\n  });\n\n  Tent.TableCell = Ember.View.extend({\n    tagName: 'td',\n    classNameBindings: ['isRadio:tent-width-small'],\n    defaultTemplate: Ember.Handlebars.compile('{{view.value}}'),\n    value: (function() {\n      var row, _const;\n      row = this.get('parentView').get('parentView').get('content');\n      if (row) {\n        _const = row.__proto__.constructor;\n        if (_const === Object) {\n          return row[this.get('content')];\n        } else {\n          return row.get(this.get('content'));\n        }\n      } else {\n        return '';\n      }\n    }).property('content', 'parentView')\n  });\n\n  Tent.TableHeader = Ember.View.extend({\n    tagName: 'th',\n    defaultTemplate: Ember.Handlebars.compile('{{view.printableColumnName}}'),\n    printableColumnName: (function() {\n      var columnName;\n      columnName = this.get('content');\n      if (typeof columnName === 'string') {\n        return columnName.camelToWords();\n      }\n    }).property('content')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/table");minispade.register('view/tag', "(function() {(function() {\n\n  Tent.Tag = Ember.View.extend({\n    tagName: 'span',\n    type: 'info',\n    classNameBindings: ['labelClasses'],\n    labelClasses: (function() {\n      return 'label ' + 'label-' + this.get('type');\n    }).property('type'),\n    template: Ember.Handlebars.compile('{{view.text}}'),\n    init: function() {\n      var classNames, type;\n      this._super();\n      type = this.get('type');\n      classNames = this.get('classNames');\n      if (type) {\n        return classNames.push('label-' + type);\n      }\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/tag");minispade.register('view/text_field', "(function() {(function() {\nminispade.require('view/field_support');\nminispade.require('template/text_field');\n\n  Tent.TextField = Ember.View.extend(Tent.FieldSupport, {\n    templateName: 'text_field',\n    classNames: ['tent-text-field', 'control-group']\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/text_field");minispade.register('view/validation_support', "(function() {(function() {\n\n  Tent.ValidationSupport = Ember.Mixin.create({\n    validate: function() {\n      this.flushValidationErrors();\n      return true;\n    },\n    hasErrors: (function() {\n      return (this.validate != null ? !this.validate() : void 0) || false;\n    }).property('value'),\n    observesErrors: (function() {\n      var classNames;\n      classNames = this.get('classNames');\n      if (this.get('hasErrors')) {\n        if (!classNames.contains('error')) {\n          return classNames[classNames.length] = 'error';\n        }\n      } else {\n        return classNames.removeObject('error');\n      }\n    }).observes('hasErrors'),\n    flushValidationErrors: function() {\n      return this.set('validationErrors', []);\n    },\n    addValidationError: function(error) {\n      return this.set('validationErrors', error);\n    }\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/validation_support");minispade.register('view/visibility_support', "(function() {(function() {\nminispade.require('util/translation_support');\n\n  Tent.VisibilitySupport = Ember.Mixin.create({\n    isVisible: true,\n    _widgetShowing: true,\n    isVisibleAsBoolean: Tent.computed.boolCoerceGently('isVisible'),\n    isHidden: Ember.computed.not('isVisibleAsBoolean'),\n    observesVisibility: (function() {\n      if (this.get('isVisibleAsBoolean')) {\n        if (!this.get('_widgetShowing')) {\n          this.$().show();\n        }\n        return this.set('_widgetShowing', true);\n      } else {\n        if (this.get('_widgetShowing')) {\n          this.$().hide();\n        }\n        return this.set('_widgetShowing', false);\n      }\n    }).observes('isVisible')\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=view/visibility_support");